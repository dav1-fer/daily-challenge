import React from 'react';

// Function to get an SVG based on category
const getCategorySVG = (category) => {
  switch (category) {
    case "study":
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor" viewBox="0 0 16 16">
          <path d="M8 0a8 8 0 1 0 8 8A8 8 0 0 0 8 0ZM5.5 3h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H5.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5ZM4 5v5h8V5H4Zm0 6v1.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V11H4Z"/>
        </svg>
      );
    case "exercise":
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor" viewBox="0 0 16 16">
          <path d="M1 6v4h2V6H1zm12 0v4h2V6h-2zM4 5h8v6H4V5z"/>
        </svg>
      );
    case "health":
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor" viewBox="0 0 16 16">
          <path d="M8 1a6 6 0 0 1 6 6c0 3.866-3.582 6.577-5.143 7.746a.5.5 0 0 1-.57 0C5.582 13.577 2 10.866 2 7a6 6 0 0 1 6-6zm-.5 5.5v1h1v-1h1v-1h-1v-1h-1v1h-1v1h1z"/>
        </svg>
      );
    case "mindfulness":
      return (
        <svg width="120" height="120" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M11.9998 18.5C12.0014 19.0243 11.8377 19.5357 11.532 19.9616C11.2263 20.3875 10.794 20.7061 10.2968 20.8722C9.79952 21.0383 9.26256 21.0435 8.76222 20.8869C8.26189 20.7303 7.82365 20.42 7.50983 20H7.49983C7.11466 20.0046 6.73377 19.9189 6.38764 19.7499C6.04151 19.5809 5.73974 19.3332 5.50648 19.0267C5.27323 18.7202 5.11496 18.3633 5.04435 17.9846C4.97373 17.6059 4.99273 17.216 5.09983 16.846C4.56927 16.6817 4.09515 16.3725 3.73095 15.9531C3.36675 15.5338 3.12694 15.0211 3.03856 14.4727C2.95019 13.9244 3.01676 13.3623 3.23078 12.8497C3.4448 12.3372 3.79775 11.8947 4.24983 11.572C3.98138 11.0218 3.92697 10.3915 4.09716 9.80352C4.26736 9.2155 4.65002 8.71171 5.17083 8.39C5.03684 8.04852 4.98037 7.68153 5.0055 7.31556C5.03062 6.9496 5.13672 6.59378 5.31613 6.27381C5.49554 5.95384 5.74377 5.67772 6.0429 5.46539C6.34203 5.25305 6.68459 5.10981 7.04583 5.046C7.1518 4.47218 7.45515 3.9535 7.90334 3.57983C8.35152 3.20616 8.9163 3.00103 9.49983 3C9.82813 3 10.1532 3.06466 10.4565 3.1903C10.7599 3.31594 11.0354 3.50009 11.2676 3.73223C11.4997 3.96438 11.6839 4.23998 11.8095 4.54329C11.9352 4.84661 11.9998 5.1717 11.9998 5.5M11.9998 18.5V5.5M11.9998 18.5C11.9982 19.0243 12.1619 19.5357 12.4677 19.9616C12.7734 20.3875 13.2056 20.7061 13.7029 20.8722C14.2001 21.0383 14.7371 21.0435 15.2374 20.8869C15.7378 20.7303 16.176 20.42 16.4898 20H16.4998C16.8852 20.005 17.2665 19.9198 17.613 19.7509C17.9595 19.5821 18.2617 19.3345 18.4953 19.0279C18.7289 18.7213 18.8874 18.3643 18.9582 17.9854C19.029 17.6065 19.01 17.2163 18.9028 16.846C19.4332 16.6814 19.907 16.3718 20.2709 15.9523C20.6347 15.5328 20.8742 15.02 20.9623 14.4717C21.0503 13.9234 20.9835 13.3614 20.7693 12.8491C20.555 12.3368 20.202 11.8944 19.7498 11.572C20.0183 11.0218 20.0727 10.3915 19.9025 9.80352C19.7323 9.2155 19.3496 8.71171 18.8288 8.39C18.9628 8.04852 19.0193 7.68153 18.9942 7.31556C18.969 6.9496 18.8629 6.59378 18.6835 6.27381C18.5041 5.95384 18.2559 5.67772 17.9568 5.46539C17.6576 5.25305 17.3151 5.10981 16.9538 5.046C16.8479 4.47218 16.5445 3.9535 16.0963 3.57983C15.6481 3.20616 15.0834 3.00103 14.4998 3C13.8368 3 13.2009 3.26339 12.7321 3.73223C12.2632 4.20107 11.9998 4.83696 11.9998 5.5M3.99983 10.5C3.99974 10.0866 4.10218 9.67963 4.29796 9.31553C4.49374 8.95143 4.77675 8.64156 5.12166 8.41366C5.46658 8.18577 5.86262 8.04696 6.27433 8.00968C6.68605 7.97239 7.10059 8.03778 7.48083 8.2M7.19983 16.751C6.52085 17.0483 5.75587 17.0837 5.05234 16.8504C4.3488 16.6171 3.75654 16.1316 3.38973 15.4875C3.02291 14.8435 2.90751 14.0864 3.06577 13.3623C3.22404 12.6382 3.64476 11.9983 4.24683 11.566M19.9998 10.5C19.9999 10.0866 19.8975 9.67963 19.7017 9.31553C19.5059 8.95143 19.2229 8.64156 18.878 8.41366C18.5331 8.18577 18.137 8.04696 17.7253 8.00968C17.3136 7.97239 16.8991 8.03778 16.5188 8.2M16.7998 16.751C17.4788 17.0483 18.2438 17.0837 18.9473 16.8504C19.6509 16.6171 20.2431 16.1316 20.6099 15.4875C20.9767 14.8435 21.0921 14.0864 20.9339 13.3623C20.7756 12.6382 20.3549 11.9983 19.7528 11.566" stroke="#F06A35" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>

      );
    case "social":
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor" viewBox="0 0 16 16">
          <path d="M3.5 0A1.5 1.5 0 0 0 2 1.5v5A1.5 1.5 0 0 0 3.5 8H6v1H5a1 1 0 0 0-1 1v1h8V10a1 1 0 0 0-1-1h-1V8h2.5A1.5 1.5 0 0 0 14 6.5v-5A1.5 1.5 0 0 0 12.5 0h-9z"/>
        </svg>
      );
    default:
      return null;
  }
};

const ChallengeView = ({ challenge }) => {
  return (
    <div className="mt-6 flex flex-col items-center text-center">
      {challenge ? (
        <>
          {getCategorySVG(challenge.category)}
          <p className="text-lg font-semibold">{challenge.text}</p>
        </>
      ) : (
        <p className="text-gray-500">Click the button to get a challenge!</p>
      )}
    </div>
  );
};

export default ChallengeView;
